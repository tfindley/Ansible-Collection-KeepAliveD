---

- name: KeepAliveD.PreFlight - Test if KeepAliveD is enabled
  delegate_to: localhost
  connection: local
  become: false
  ansible.builtin.assert:
    that:
      - keepalived_enabled | bool
    quiet: true
    fail_msg: KeepAliveD is not enabled - nothing to do.

- name: KeepAliveD.PreFlight - Run host count check
  delegate_to: localhost
  connection: local
  become: false
  ansible.builtin.assert:
    that:
      - ansible_play_hosts | length >= 2
    fail_msg: "KeepAliveD is designed for 2 or more hosts. Please adjust your inventory."

# - name: KeepAliveD.PreFlight - Random password var generation  # Warning: using this variable will break idempotency
#   run_once: true
#   no_log: true
#   delegate_to: localhost
#   ansible.builtin.set_fact:
#     keepalived_random_pass: "{{ lookup('community.general.random_string', length=32, special=false) }}"

- name: KeepAliveD.PreFlight - Test if KeepAliveD variables are set
  become: false
  loop: "{{ keepalived_vrrp | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"
  ansible.builtin.assert:
    that:
      - item.name is defined and item.name is string
      - item.interface is defined and item.interface is string
      - item.priority is defined and item.priority is number
      - item.virtual_router_id is defined and item.virtual_router_id is number
      - item.unicast_src_ip is defined and item.unicast_src_ip is ansible.utils.ipv4 and item.unicast_src_ip is match('^(\d{1,3}\.){3}\d{1,3}$')
      - item.vip is defined and item.vip | list
    # quiet: true

- name: KeepAliveD.PreFlight - Test VRRP States
  become: false
  loop: "{{ keepalived_vrrp | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.state is defined
  vars:
    states:
      - MASTER
      - BACKUP
  ansible.builtin.assert:
    that:
      - item.state in states

- name: KeepAliveD.PreFlight - Test if KeepAliveD interfaces
  become: false
  loop: "{{ keepalived_vrrp }}"
  loop_control:
    label: "{{ item.interface }}"
  ansible.builtin.assert:
    that:
      - item.interface in ansible_interfaces
    quiet: true
    fail_msg: "{{ item.interface }} is not a valid network adapter on the host"

- name: KeepAliveD.PreFlight - Test if KeepAliveD Authentication is configured
  become: false
  loop: "{{ keepalived_vrrp | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.authentication is defined
  vars:
    authentication_types:
      - PASS
      - AH
  ansible.builtin.assert:
    that:
      - item.authentication.type is defined and item.authentication.type | upper in authentication_types
      - item.authentication.pass is defined and item.authentication.pass | length > 4
    quiet: true
    fail_msg: "Authenticaion settings not configured correctly"

- name: KeepAliveD.PreFlight - Test KeepAliveD garp settings
  become: false
  loop: "{{ keepalived_vrrp | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.garp is defined
  ansible.builtin.assert:
    that:
      - item.garp.master_refresh is defined and item.garp.master_refresh is number
      - item.garp.master_refresh_repeat is defined and item.garp.master_refresh_repeat is number
    quiet: true
    fail_msg: "GARP settings not configured correctly"

# - name: KeepAliveD.PreFlight - Test KeepAliveD VIP list
#   become: false
#   loop:
#     - "{{ keepalived_vip | list }}"
#   ansible.builtin.assert:
#     that:
#       - item | ansible.utils.ipv4
#     quiet: true
#     fail_msg: "{{ item }} is not a valid ipv4 address"

- name: KeepAliveD.PreFlight - Checkscript validations
  delegate_to: localhost
  connection: local
  become: false
  when:
    - keepalived_checkscript_enabled | bool
  block:

    - name: KeepAliveD.PreFlight - Test KeepAliveD CheckScript variables
      ansible.builtin.assert:
        that:
          - keepalived_checkscript_group is string and keepalived_checkscript_group | length > 1
          - keepalived_checkscript_user is string and keepalived_checkscript_user | length > 1

    - name: KeepAliveD.PreFlight - Test KeepAliveD CheckScripts
      loop: "{{ keepalived_checkscript_scripts | list }}"
      loop_control:
        label: "{{ item.filename }}"
      ansible.builtin.assert:
        that:
          - item.filename and item.filename | length > 1
          - item.content and item.content | length > 1
          - item.interval is number
          - item.fall is number
          - item.rise is number
          - item.timeout is number
          - item.weight is number
        quiet: true
        fail_msg: "{{ item }} is not a valid ipv4 address"

    - name: KeepAliveD.PreFlight - Validate Checkscript References
      ansible.builtin.assert:
        that:
          - item in keepalived_checkscript_scripts | map(attribute='name') | list
        fail_msg: "Checkscript '{{ item }}' is referenced in keepalived_vrrp but not defined in keepalived_checkscript_scripts."
      loop: "{{ keepalived_vrrp | map(attribute='checkscript') | list | flatten }}"
